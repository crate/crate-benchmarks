apply plugin: 'java'
apply plugin: 'idea'

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://jitpack.io" }
}

def extractVersion(String url) {
    url.find(/(\d+).(\d+).(\d+)/)
}

def extractTag(String url) {
    if (url != null) {
        def matcher = url =~ /([a-f0-9]{7})\.tar\.gz/
        if (matcher.size() == 0) {
            return extractVersion(url)
        } else {
            return matcher[0][1]
        }
    } else if (project.crateVersion != null) {
        return project.crateVersion
    } else {
        throw new GradleException("\"crate.testing.from_version\" or " +
                "\"crate.testing.from_url\" system property must be provided")
    }
}

project.ext.crateVersion = System.getProperty('crate.testing.from_version', null)
project.ext.crateUrl = System.getProperty('crate.testing.from_url', null)
project.ext.tag = extractTag(project.crateUrl)

dependencies {

    testCompile 'junit:junit:4.12'
    testCompile 'com.carrotsearch:junit-benchmarks:0.7.2'
    testCompile 'com.h2database:h2:1.3.173'
    testCompile 'org.apache.httpcomponents:httpclient:4.5.2'

    testCompile 'com.github.crate.crate:crate-client:' + project.tag
    testCompile 'com.tdunning:t-digest:3.0'
    testCompile 'io.crate:crate-testing:0.4.1'
    testCompile 'com.google.code.gson:gson:2.2.4'
    testCompile ('com.carrotsearch.randomizedtesting:randomizedtesting-runner:2.3.1') {
        exclude group: 'junit', module: 'junit'
    }
}

test {
    enabled = false
}

tasks.withType(Test) {
    outputs.upToDateWhen { false }

    // allow to set the number of test forks from the CLI
    if (project.hasProperty('testForks')) {
        maxParallelForks = project.testForks as int
    }
    testLogging.exceptionFormat = 'full'
    testLogging.showStandardStreams = true
}

task stress(type: Test) {
    description = 'Run the Crate stresstests which are very resource hungry'
    group = 'crate'

    doFirst {
        if (project.crateUrl != null) {
            systemProperty 'jub.customkey', extractVersion(project.crateUrl)
            systemProperty 'crate.testing.from_url', project.crateUrl
        } else {
            systemProperty 'jub.customkey', project.crateVersion
            systemProperty 'crate.testing.from_version', project.crateVersion
        }
    }
    include('io/crate/stress/**')
}

task bench(type: Test) {
    description = 'Run the external crate Benchmarks'
    group = 'crate'

    def benchmark_dir = project.projectDir.path + '/reports/bench/'

    // Properties for JUnit Benchmarks
    systemProperty 'jub.consumers', System.getProperty('jub.consumers', 'CONSOLE')
    systemProperty 'jub.db.file', benchmark_dir + 'results'
    systemProperty 'jub.xml.file', benchmark_dir + 'results.xml'
    systemProperty 'jub.charts.dir', benchmark_dir

    systemProperty 'jub.crate.host', System.getProperty('jub.crate.host', null)
    systemProperty 'jub.crate.http', System.getProperty('jub.crate.http', "4200")
    systemProperty 'jub.crate.transport', System.getProperty('jub.crate.transport', "4300")

    doFirst {
        if (project.crateUrl != null) {
            systemProperty 'jub.customkey', extractVersion(project.crateUrl)
            systemProperty 'crate.testing.from_url', project.crateUrl
        } else {
            systemProperty 'jub.customkey', project.crateVersion
            systemProperty 'crate.testing.from_version', project.crateVersion
        }
    }
    include('io/crate/benchmark/**')

    doLast {
        println "Benchmark Results in " + benchmark_dir
    }
}

sourceSets {
    test {
        resources {
            srcDir 'src/test/java'
            include '**/*.rst'
            include '**/*.json'
            include '**/*.json.gz'
            include '**/*.sql'
            include '**/*.html'
            include '**/*.jsonp'
        }
    }
}

idea {
    project {
        languageLevel = 'JDK_1_8' // \o/
        vcs = 'Git'

        ipr {
            withXml { provider ->
                def node = provider.asNode()
                node.append(new XmlParser().parse(file("codeStyle.xml")))
                def copyrightManager = node.component.find { it.'@name' == 'CopyrightManager' }
                copyrightManager.@default = "CrateASL2"
                def aslCopyright = copyrightManager.copyright.find { it.option.find { it.@name == "myName" }?.@value == "CrateASL2" }
                if (aslCopyright == null) {
                    copyrightManager.append(new XmlParser().parse(file("copyright.xml")))
                }
            }
        }
    }

}

task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
}
